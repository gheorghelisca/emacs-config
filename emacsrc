;-*-Lisp-*-

; Public emacs site
(add-to-list 'load-path "/usr/share/emacs/site-lisp/emacs-color-themes")
(add-to-list 'load-path "~/local/private/all/share/emacs/site-lisp")
(add-to-list 'load-path "~/.emacs.d/site")
;(add-to-list 'load-path "~/work/list/sbcl/site/slime-2.0-cvs")

; slime
;(load "slime.el")
;(if (file-readable-p "~/.emacs.d/config/slime")
;  (load "~/.emacs.d/config/slime"))
(if (file-readable-p "/usr/local/lehrstuhl/DIR/lisp/config-host/slime")
  (load "/usr/local/lehrstuhl/DIR/lisp/config-host/slime"))
; ilisp
;(if (file-readable-p "/usr/local/lehrstuhl/DIR/lisp/config-host/ilisp")
;  (load "/usr/local/lehrstuhl/DIR/lisp/config-host/ilisp"))
;(if (file-readable-p "~/.ilisp")
;  (load "~/.ilisp"))

; Emacs should always ask for confirmation on exit
(setq confirm-kill-emacs 'yes-or-no-p)

; other settings
(require 'paren)
(show-paren-mode 1)
(global-set-key '[delete] 'delete-char)

(setq minibuffer-max-depth nil)
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(c-basic-offset (quote set-from-style))
 '(column-number-mode t)
 '(ecb-grep-function (quote grep-find))
 '(ecb-layout-name "left15")
 '(ecb-layout-window-sizes (quote (("left15" (0.235 . 0.48333333333333334) (0.235 . 0.48333333333333334)))))
 '(ecb-options-version "2.32")
 '(ecb-source-path (quote (("/work/moesenle" "home") ("~/work/lisp/work" "COGITO") ("~/work/lisp/tests" "TESTS"))))
 '(ecb-tip-of-the-day nil)
 '(gnuserv-program (concat exec-directory "/gnuserv"))
 '(ispell-local-dictionary "american")
 '(line-number-mode t)
 '(load-home-init-file t t)
 '(next-line-add-newlines nil)
 '(paren-mode (quote paren) nil (paren))
 '(pc-select-meta-moves-sexps t)
 '(pc-select-selection-keys-only t)
 '(pc-selection-mode t nil (pc-select))
 '(safe-local-variable-values (quote ((Syntax . Common-Lisp) (Package . SAX) (Encoding . utf-8) (Syntax . COMMON-LISP) (Package . CL-PPCRE) (package . rune-dom) (readtable . runes) (Syntax . ANSI-Common-Lisp) (Base . 10))))
 '(slime-complete-symbol-function (quote slime-complete-symbol*))
 '(transient-mark-mode t)
 '(viper-force-faces t))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:stipple nil :background "black" :foreground "#c0c0c0" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 90 :width normal :family "adobe-courier"))))
 '(ecb-default-highlight-face ((((class color) (background dark)) (:foreground "magenta" :underline t))))
 '(ecb-directory-face ((((class color) (background dark)) (:inherit ecb-default-highlight-face))))
 '(ecb-history-face ((((class color) (background dark)) (:inherit ecb-default-highlight-face))))
 '(ecb-method-face ((((class color) (background dark)) (:inherit ecb-default-highlight-face))))
 '(ecb-source-face ((((class color) (background dark)) (:inherit ecb-default-highlight-face :underline t))))
 '(ecb-tag-header-face ((((class color) (background dark)) (:foreground "SeaGreen1" :underline t)))))

(autoload 'c++-mode  "cc-mode" "C++ Editing Mode" t)
(autoload 'c-mode    "cc-mode" "C Editing Mode"   t)
(autoload 'objc-mode "cc-mode" "Objective C Editing Mode" t)
(autoload 'text-mode "indented-text-mode" "Indented Text Editing Mode" t)
(autoload 'xrdb-mode "xrdb-mode" "Mode for editing X resource files" t)
(autoload 'ps-mode "ps-mode" "Major mode for editing PostScript" t)
(setq auto-mode-alist
  (append '(("\\.C$"       . c++-mode)
      ("\\.cc$"      . c++-mode)
      ("\\.c$"       . c-mode)
      ("\\.h$"       . c++-mode)
      ("\\.i$"       . c++-mode)
      ("\\.ii$"      . c++-mode)
      ("\\.m$"       . objc-mode)
      ("\\.pl$"      . perl-mode)
      ("\\.sql$"     . c-mode)
      ("\\.sh$"      . shell-script-mode)
      ("\\.mak$"     . makefile-mode)
      ("\\.GNU$"     . makefile-mode)
      ("makefile$"   . makefile-mode)
      ("Makefile$"   . makefile-mode)
      ("Imakefile$"  . makefile-mode)
      ("\\.Xdefaults$"    . xrdb-mode)
      ("\\.Xenvironment$" . xrdb-mode)
      ("\\.Xresources$"   . xrdb-mode)
      ("*.\\.ad$"         . xrdb-mode)
      ("\\.[eE]?[pP][sS]$" . ps-mode)
      ("\\.nsp"      . lisp-mode)
      ("\\.asd"      . lisp-mode)
      ("\\.vimpulse" . lisp-mode)
      ("\\.cl$"      . lisp-mode)
      ) auto-mode-alist))

(setq default-tab-width 4)
(setq initial-major-mode 'text-mode)
(setq default-major-mode 'text-mode)
(setq scroll-step 1)
(setq scroll-conservatively 5)
(global-font-lock-mode t)               ;colorize all buffers
(setq-default indent-tabs-mode nil)

; Search highlighting
; highlight during query
(setq query-replace-highlight t)        
; highlight incremental search
(setq search-highlight t)               

(setq viper-mode t)                ; enable Viper at load time
(setq viper-ex-style-editing nil)  ; can backspace past start of insert / line
(require 'viper)                   ; load Viper

(require 'vimpulse)                ; load Vimpulse
;(require 'redo)                    ; redo
; vim like movement in compilation/grep buffers

(add-hook 'compilation-mode-hook 'vimove-mode)

(require 'rect-mark)
(setq woman-use-own-frame nil)     ; don't create new frame for manpages
(setq woman-use-topic-at-point t)  ; don't prompt upon K key (manpage display)

; ecp
(require 'ecb-autoloads)

(require 'color-theme)
(color-theme-hober)

; Vim-like motion
(require 'vimove)

; C/C++ indentation config
(require 'cc-mode)
(setq c-basic-offset 4)
(setq c-default-style
      '((java-mode . "java") (other . "ellemtel")))
(setq c-offsets-alist '((arglist-cont-nonempty . +)))
(define-key c-mode-base-map "\C-c\C-c" 'recompile)

; SHIFT-Arrow for moving through windows
(windmove-default-keybindings)

; Some additional slime config
(add-to-list 'load-path (concat slime-*directory* "contrib/"))

; Good tab-completion ;)
(require 'slime-c-p-c)
(slime-c-p-c-init)

; Nice presentations of lisp objects in repl
(require 'slime-presentations)
(slime-presentations-init)

; Cool object inspector
(require 'slime-fancy-inspector)

(setq slime-multiprocessing t)
(add-hook 'slime-mode-hook
  (lambda ()
    ; adjust lisp indentation
    (set-variable lisp-indent-function 'common-lisp-indent-function)
    (put 'if 'common-lisp-indent-function '(2 &rest 2))
    (put 'cond 'common-lisp-indent-function '(&rest (&whole 2 &rest 2)))
    (put 'let  'common-lisp-indent-function '((&whole 4 &rest (&whole 2 1 2)) &body))
    (put 'let* 'common-lisp-indent-function '((&whole 4 &rest (&whole 2 1 2)) &body))
    (put 'make-instance 'common-lisp-indent-function '(4 &rest 2))
    (put 'defclass 'common-lisp-indent-function '(6 4 (&whole 2 &rest 1) (&whole 2 &rest 1)))
    
    (slime-define-key "\r" 'newline-and-indent)
    (slime-define-key [tab] 'slime-indent-and-complete-symbol)))

; create a slime shortcut for kibo
(defslime-repl-shortcut slime-repl-kibo ("kibo")
  (:handler (lambda ()
              (interactive)
              (insert "(cl-user::kibo)")
              (slime-repl-send-input t)
              (slime-repl-set-package ":kibo")))
  (:one-liner "Start the KIBO environment."))

(add-hook 'slime-rpl-connected-hook (lambda ()
                                      (slime-repl-eval-string "(kibo) (in-package :kibo) (values)")))

; sbcl
(defun sbcl ()
  "Inferior SBCL"
  (interactive)
  (let ( (inferior-lisp-program "/usr/bin/sbcl") )
    (slime)))

; sbcl git dev version
(defun sbcl-dev ()
  "Inferior SBCL"
  (interactive)
  (let ( (inferior-lisp-program "/bin/sh /usr/wiss/moesenle/local/sources/lenny-amd64/private/sbcl/run-sbcl.sh") )
    (slime)))

; Mouse wheel
(autoload 'mwheel-install "mwheel" "Enable mouse wheel support.") (mwheel-install)

; Ignore .svn stuff in grep-find
; (custom-set-variables
(setq grep-find-command "find . -type f -not -name \"*.svn-base\" -and -not -name \"*.tmp\" -print0 | xargs -0 -e grep -i -n -s -F ")

; Load auctex
(load "auctex")

(put 'downcase-region 'disabled nil)

; Flyspell mode
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
(dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  (add-hook hook (lambda () (flyspell-mode -1))))

(setq flyspell-default-dictionary "american")

